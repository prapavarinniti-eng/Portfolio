const https = require('https');
const http = require('http');

// ‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà deploy ‡πÅ‡∏•‡πâ‡∏ß
const SITE_URL = process.env.SITE_URL || 'https://your-app.onrender.com';
const PING_INTERVAL = 14 * 60 * 1000; // 14 ‡∏ô‡∏≤‡∏ó‡∏µ (Render sleep ‡∏´‡∏•‡∏±‡∏á 15 ‡∏ô‡∏≤‡∏ó‡∏µ)

function pingServer() {
  const url = new URL(SITE_URL);
  const client = url.protocol === 'https:' ? https : http;
  
  console.log(`üèì Pinging ${SITE_URL} at ${new Date().toISOString()}`);
  
  const req = client.get(SITE_URL, (res) => {
    console.log(`‚úÖ Ping successful - Status: ${res.statusCode}`);
  });
  
  req.on('error', (error) => {
    console.log(`‚ùå Ping failed: ${error.message}`);
  });
  
  req.setTimeout(10000, () => {
    req.destroy();
    console.log('‚è∞ Ping timeout');
  });
}

function startKeepAlive() {
  console.log('üöÄ Keep-alive service started');
  console.log(`üìç Target: ${SITE_URL}`);
  console.log(`‚è±Ô∏è  Interval: ${PING_INTERVAL / 1000 / 60} minutes`);
  
  // Ping ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°
  pingServer();
  
  // Ping ‡∏ó‡∏∏‡∏Å‡πÜ 14 ‡∏ô‡∏≤‡∏ó‡∏µ
  setInterval(pingServer, PING_INTERVAL);
}

// ‡∏£‡∏±‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà development
if (process.env.NODE_ENV === 'production') {
  startKeepAlive();
} else {
  console.log('üîß Keep-alive disabled in development mode');
}

module.exports = { startKeepAlive };