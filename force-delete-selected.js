const { createClient } = require('@supabase/supabase-js');
const readline = require('readline');

const supabaseUrl = 'https://jpkzzovrrjrtchfdxdce.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impwa3p6b3ZycmpydGNoZmR4ZGNlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxMzExODUsImV4cCI6MjA2OTcwNzE4NX0.AZ-o5950oVgxUVHhX82RmHH8-FwNNg8hjtGl6vKen_w';

const supabase = createClient(supabaseUrl, supabaseKey);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function ask(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

async function forceDeleteImages() {
  try {
    console.log('üóëÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏ö‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö\n');
    
    // Get all images
    const { data: images, error } = await supabase
      .from('portfolio_images')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('‚ùå Error:', error.message);
      return;
    }
    
    if (images.length === 0) {
      console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      rl.close();
      return;
    }
    
    console.log(`üìä ‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${images.length} ‡∏£‡∏π‡∏õ\n`);
    
    // Group by category
    const categories = {};
    images.forEach(img => {
      if (!categories[img.category]) {
        categories[img.category] = [];
      }
      categories[img.category].push(img);
    });
    
    console.log('üìÇ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:');
    Object.keys(categories).forEach(cat => {
      console.log(`   ${cat}: ${categories[cat].length} ‡∏£‡∏π‡∏õ`);
    });
    
    console.log('\nüéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏•‡∏ö:');
    console.log('1. ‡∏•‡∏ö‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
    console.log('2. ‡∏•‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà)');
    console.log('3. ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
    console.log('4. ‡∏≠‡∏≠‡∏Å');
    
    const choice = await ask('\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-4): ');
    
    switch(choice) {
      case '1':
        await deleteByCategory(categories);
        break;
      case '2':
        await deleteByLimit(images, categories);
        break;
      case '3':
        await deleteAll(images);
        break;
      default:
        console.log('üëã ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
        rl.close();
        return;
    }
    
  } catch (error) {
    console.error('üí• Error:', error);
  }
}

async function deleteByCategory(categories) {
  console.log('\nüìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö:');
  
  const catList = Object.keys(categories);
  catList.forEach((cat, i) => {
    console.log(`${i + 1}. ${cat} (${categories[cat].length} ‡∏£‡∏π‡∏õ)`);
  });
  
  const choice = await ask('\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç): ');
  const selectedCat = catList[parseInt(choice) - 1];
  
  if (!selectedCat) {
    console.log('‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    rl.close();
    return;
  }
  
  const imagesToDelete = categories[selectedCat];
  console.log(`\n‚ö†Ô∏è ‡∏à‡∏∞‡∏•‡∏ö ${imagesToDelete.length} ‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î "${selectedCat}"`);
  
  const confirm = await ask('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô? (yes/no): ');
  if (confirm.toLowerCase() !== 'yes') {
    console.log('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
    rl.close();
    return;
  }
  
  await performDelete(imagesToDelete);
}

async function deleteByLimit(images, categories) {
  console.log('\nüìä ‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î:');
  console.log('(‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà)');
  
  const limits = {
    'wedding': 20,
    'corporate': 15,
    'fine-dining': 15,
    'buffet': 20,
    'cocktail': 10,
    'coffee-break': 10,
    'snack-box': 10,
    'government': 10,
    'signature': 10,
    'food-stall': 10
  };
  
  console.log('\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:');
  Object.entries(limits).forEach(([cat, limit]) => {
    const current = categories[cat]?.length || 0;
    console.log(`   ${cat}: ‡πÄ‡∏Å‡πá‡∏ö ${limit} ‡∏£‡∏π‡∏õ (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ${current})`);
  });
  
  const confirm = await ask('\n‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥? (yes/no): ');
  if (confirm.toLowerCase() !== 'yes') {
    console.log('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
    rl.close();
    return;
  }
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
  let toDelete = [];
  Object.keys(categories).forEach(cat => {
    const limit = limits[cat] || 10;
    const images = categories[cat];
    
    if (images.length > limit) {
      const excess = images.slice(limit); // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤
      toDelete = toDelete.concat(excess);
      console.log(`üìÇ ${cat}: ‡∏•‡∏ö ${excess.length} ‡∏£‡∏π‡∏õ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${limit})`);
    }
  });
  
  if (toDelete.length === 0) {
    console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö');
    rl.close();
    return;
  }
  
  console.log(`\nüóëÔ∏è ‡∏£‡∏ß‡∏°‡∏à‡∏∞‡∏•‡∏ö: ${toDelete.length} ‡∏£‡∏π‡∏õ`);
  const finalConfirm = await ask('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö? (yes/no): ');
  
  if (finalConfirm.toLowerCase() !== 'yes') {
    console.log('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
    rl.close();
    return;
  }
  
  await performDelete(toDelete);
}

async function deleteAll(images) {
  console.log(`\n‚ö†Ô∏è ‡∏à‡∏∞‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${images.length} ‡∏£‡∏π‡∏õ`);
  console.log('‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ!');
  
  const confirm1 = await ask('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 1? (yes/no): ');
  if (confirm1.toLowerCase() !== 'yes') {
    console.log('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
    rl.close();
    return;
  }
  
  const confirm2 = await ask('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2? ‡∏û‡∏¥‡∏°‡∏û‡πå "DELETE ALL": ');
  if (confirm2 !== 'DELETE ALL') {
    console.log('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
    rl.close();
    return;
  }
  
  await performDelete(images);
}

async function performDelete(imagesToDelete) {
  console.log(`\nüîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö ${imagesToDelete.length} ‡∏£‡∏π‡∏õ...`);
  
  let deleted = 0;
  let failed = 0;
  
  // ‡∏•‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏π‡∏õ
  for (let i = 0; i < imagesToDelete.length; i++) {
    const img = imagesToDelete[i];
    
    try {
      const { error } = await supabase
        .from('portfolio_images')
        .delete()
        .eq('id', img.id);
      
      if (error) {
        console.log(`‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${img.title} - ${error.message}`);
        failed++;
      } else {
        deleted++;
        if (deleted % 10 === 0) {
          console.log(`‚úÖ ‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß ${deleted}/${imagesToDelete.length}...`);
        }
      }
      
    } catch (error) {
      console.log(`üí• Error: ${img.title} - ${error.message}`);
      failed++;
    }
  }
  
  console.log(`\nüéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!`);
  console.log(`‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${deleted} ‡∏£‡∏π‡∏õ`);
  console.log(`‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${failed} ‡∏£‡∏π‡∏õ`);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  const { count } = await supabase
    .from('portfolio_images')
    .select('*', { count: 'exact', head: true });
  
  console.log(`üìä ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${count} ‡∏£‡∏π‡∏õ`);
  
  rl.close();
}

// ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
forceDeleteImages().catch(console.error);