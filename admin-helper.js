#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Supabase configuration
const supabaseUrl = 'https://jpkzzovrrjrtchfdxdce.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impwa3p6b3ZycmpydGNoZmR4ZGNlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxMzExODUsImV4cCI6MjA2OTcwNzE4NX0.AZ-o5950oVgxUVHhX82RmHH8-FwNNg8hjtGl6vKen_w';
const supabase = createClient(supabaseUrl, supabaseKey);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Helper function to ask questions
function ask(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

// Category mapping
const categories = {
  '1': { folder: '01-weddings', category: 'wedding', name: '‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô' },
  '2': { folder: '02-corporate-meetings', category: 'corporate', name: '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£' },
  '3': { folder: '03-fine-dining', category: 'fine-dining', name: '‡πÑ‡∏ü‡∏ô‡πå‡πÑ‡∏î‡∏ô‡∏¥‡πà‡∏á' },
  '4': { folder: '04-buffet-service', category: 'buffet', name: '‡∏ö‡∏∏‡∏ü‡πÄ‡∏ü‡πà‡∏ï‡πå' },
  '5': { folder: '05-cocktail-reception', category: 'cocktail', name: '‡∏Ñ‡πá‡∏≠‡∏Å‡πÄ‡∏ó‡∏•' },
  '6': { folder: '06-coffee-break', category: 'coffee-break', name: '‡∏Ñ‡∏≠‡∏ü‡∏ü‡∏µ‡πà‡πÄ‡∏ö‡∏£‡∏Ñ' },
  '7': { folder: '07-snack-food-box', category: 'snack-box', name: '‡∏™‡πÅ‡∏ô‡πá‡∏Ñ‡∏ö‡πá‡∏≠‡∏Å‡∏ã‡πå' },
  '8': { folder: '08-government-events', category: 'corporate', name: '‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê' },
  '9': { folder: '09-private-parties', category: 'wedding', name: '‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß' }
};

// Content templates for each category
const contentTemplates = {
  wedding: [
    '‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏¥‡∏°‡∏ó‡∏∞‡πÄ‡∏•‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏π',
    '‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÑ‡∏ó‡∏¢‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå',
    '‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏π',
    '‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°',
    '‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô'
  ],
  corporate: [
    'Coffee Break ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£',
    '‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏±‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó',
    '‡∏™‡∏±‡∏°‡∏°‡∏ô‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£',
    '‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏ç‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ',
    '‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'
  ],
  'fine-dining': [
    'Set Course Menu 7 ‡∏Ñ‡∏≠‡∏£‡πå‡∏™',
    '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏ä‡∏ü',
    'Tasting Menu ‡∏û‡∏¥‡πÄ‡∏®‡∏©',
    'Private Chef Experience',
    'Molecular Gastronomy'
  ],
  buffet: [
    '‡∏ö‡∏∏‡∏ü‡πÄ‡∏ü‡πà‡∏ï‡πå‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ 40 ‡πÄ‡∏°‡∏ô‡∏π',
    'International Buffet Line',
    'Premium Seafood Buffet',
    'BBQ Buffet Garden Party',
    'Healthy Salad Bar'
  ],
  cocktail: [
    'Welcome Drink & Canap√© Premium',
    '‡∏á‡∏≤‡∏ô‡∏Ñ‡πá‡∏≠‡∏Å‡πÄ‡∏ó‡∏•‡∏û‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ Evening',
    'Corporate Cocktail Reception',
    'Wine & Cheese Tasting',
    'Signature Cocktail Bar'
  ],
  'coffee-break': [
    'Executive Coffee Break',
    'High Tea Afternoon Set',
    'Morning Coffee & Pastries',
    'Meeting Refreshment',
    'Premium Tea Service'
  ],
  'snack-box': [
    'Premium Lunch Box Set',
    'Healthy Snack Box Collection',
    'Meeting Break Box',
    'Conference Snack Pack',
    'Gourmet Food Box'
  ]
};

// Main menu
async function showMainMenu() {
  console.clear();
  console.log('üéâ =======================================');
  console.log('   FUZIO CATERING - ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ');
  console.log('üéâ =======================================\n');
  
  console.log('üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥:');
  console.log('1. ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà');
  console.log('2. ‚úèÔ∏è  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏û');
  console.log('3. üóëÔ∏è  ‡∏•‡∏ö‡∏†‡∏≤‡∏û');
  console.log('4. üëÄ ‡∏î‡∏π‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
  console.log('5. üìÇ ‡∏î‡∏π‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
  console.log('6. üóëÔ∏è  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
  console.log('7. üì§ ‡∏¢‡πâ‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
  console.log('8. üì• ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å');
  console.log('9. üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  console.log('10. üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°\n');
  
  const choice = await ask('üëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç (1-10): ');
  
  switch(choice) {
    case '1': await addNewImage(); break;
    case '2': await editImage(); break;
    case '3': await deleteImage(); break;
    case '4': await viewAllImages(); break;
    case '5': await viewByCategory(); break;
    case '6': await selectiveDeleteByCategory(); break;
    case '7': await moveImageBetweenCategories(); break;
    case '8': await uploadExternalFile(); break;
    case '9': await cleanDatabase(); break;
    case '10': 
      console.log('üëã ‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô!');
      rl.close();
      return;
    default:
      console.log('‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-10 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
      await showMainMenu();
  }
}

// Add new image
async function addNewImage() {
  console.clear();
  console.log('‚ûï =======================================');
  console.log('         ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà');
  console.log('‚ûï =======================================\n');
  
  // Show categories
  console.log('üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:');
  Object.keys(categories).forEach(key => {
    console.log(`${key}. ${categories[key].name}`);
  });
  console.log();
  
  const categoryChoice = await ask('üëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (1-9): ');
  
  if (!categories[categoryChoice]) {
    console.log('‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1-9 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await addNewImage();
  }
  
  const selectedCategory = categories[categoryChoice];
  
  // Show existing files in folder
  const folderPath = path.join(__dirname, 'public', 'image', selectedCategory.folder);
  const existingFiles = fs.existsSync(folderPath) 
    ? fs.readdirSync(folderPath).filter(f => f.endsWith('.jpg'))
    : [];
  
  console.log(`\nüìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô ${selectedCategory.name}:`);
  if (existingFiles.length === 0) {
    console.log('   (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå)');
  } else {
    existingFiles.forEach((file, i) => {
      console.log(`   ${i + 1}. ${file}`);
    });
  }
  
  console.log('\nüìù ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°:');
  console.log('üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:');
  console.log('   - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 5');
  console.log('   - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏û: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ ‡πÄ‡∏ä‡πà‡∏ô 1,3,5');
  console.log('   - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡∏µ‡∏î ‡πÄ‡∏ä‡πà‡∏ô 1-5');
  console.log('   - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ‡∏û‡∏¥‡∏°‡∏û‡πå all');
  
  const selection = await ask('üëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û: ');
  
  if (!selection.trim()) {
    console.log('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await addNewImage();
  }
  
  // Parse selection
  let selectedIndices = [];
  
  try {
    if (selection.toLowerCase() === 'all') {
      // Select all images
      selectedIndices = existingFiles.map((_, i) => i);
    } else if (selection.includes(',')) {
      // Multiple selection: 1,3,5
      selectedIndices = selection.split(',').map(s => parseInt(s.trim()) - 1);
    } else if (selection.includes('-')) {
      // Range selection: 1-5
      const [start, end] = selection.split('-').map(s => parseInt(s.trim()));
      for (let i = start - 1; i < end; i++) {
        selectedIndices.push(i);
      }
    } else {
      // Single selection: 5
      selectedIndices = [parseInt(selection) - 1];
    }
    
    // Validate indices
    selectedIndices = selectedIndices.filter(i => i >= 0 && i < existingFiles.length);
    
    if (selectedIndices.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
      return await addNewImage();
    }
    
  } catch (error) {
    console.log('‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await addNewImage();
  }
  
  // Get selected files
  const selectedFiles = selectedIndices.map(i => existingFiles[i]);
  
  console.log(`\nüì∏ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ${selectedFiles.length} ‡∏†‡∏≤‡∏û:`);
  selectedFiles.forEach((file, i) => {
    console.log(`${i + 1}. ${file}`);
  });
  
  const confirm = await ask('\nüëâ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ? (yes/no): ');
  
  if (confirm.toLowerCase() !== 'yes' && confirm.toLowerCase() !== 'y') {
    console.log('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await addNewImage();
  }
  
  // Process each selected file
  const templates = contentTemplates[selectedCategory.category] || ['‡∏†‡∏≤‡∏û‡∏™‡∏ß‡∏¢‡πÜ'];
  let successCount = 0;
  let failCount = 0;
  
  console.log(`\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° ${selectedFiles.length} ‡∏†‡∏≤‡∏û...`);
  
  for (let i = 0; i < selectedFiles.length; i++) {
    const fileName = selectedFiles[i];
    const imageNumber = i + 1;
    
    // Check if file exists
    const fullPath = path.join(folderPath, fileName);
    if (!fs.existsSync(fullPath)) {
      console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${fileName}`);
      failCount++;
      continue;
    }
    
    // Generate unique title for each image
    const randomTemplate = templates[Math.floor(Math.random() * templates.length)];
    const title = `${randomTemplate} - ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà ${imageNumber}`;
    const description = `${title} ‡∏à‡∏±‡∏î‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏Ç‡∏≠‡∏á Fuzio Catering ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`;
    
    // Add to database
    try {
      const imageUrl = `/image/${selectedCategory.folder}/${fileName}`;
      
      const { data, error } = await supabase
        .from('portfolio_images')
        .insert({
          title: title,
          description: description,
          category: selectedCategory.category,
          image_url: imageUrl,
          created_at: new Date().toISOString()
        });
      
      if (error) {
        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° ${fileName}: ${error.message}`);
        failCount++;
      } else {
        console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß: ${fileName} -> ${title}`);
        successCount++;
      }
    } catch (error) {
      console.log(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ${fileName}: ${error.message}`);
      failCount++;
    }
    
    // Small delay to avoid overwhelming the database
    if (selectedFiles.length > 5) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }
  
  // Summary
  console.log(`\nüéâ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û:`);
  console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount} ‡∏†‡∏≤‡∏û`);
  if (failCount > 0) {
    console.log(`‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${failCount} ‡∏†‡∏≤‡∏û`);
  }
  console.log(`üìÅ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${selectedCategory.name}`);
  
  await ask('\n‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
  await showMainMenu();
}

// Edit image
async function editImage() {
  console.clear();
  console.log('‚úèÔ∏è =======================================');
  console.log('         ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏û');
  console.log('‚úèÔ∏è =======================================\n');
  
  // Get all images
  const { data: images, error } = await supabase
    .from('portfolio_images')
    .select('*')
    .order('created_at', { ascending: false });
  
  if (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error.message);
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
    return await showMainMenu();
  }
  
  if (images.length === 0) {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
    return await showMainMenu();
  }
  
  console.log('üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
  images.forEach((img, i) => {
    console.log(`${i + 1}. [${img.category}] ${img.title}`);
  });
  
  const choice = await ask(`\nüëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (1-${images.length}): `);
  const index = parseInt(choice) - 1;
  
  if (index < 0 || index >= images.length) {
    console.log('‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await editImage();
  }
  
  const selectedImage = images[index];
  
  console.log(`\nüìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:`);
  console.log(`üñºÔ∏è  ‡∏ä‡∏∑‡πà‡∏≠: ${selectedImage.title}`);
  console.log(`üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: ${selectedImage.description}`);
  console.log(`üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${selectedImage.category}`);
  
  console.log('\n‚úèÔ∏è ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°):');
  const newTitle = await ask('üëâ ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: ') || selectedImage.title;
  const newDescription = await ask('üëâ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà: ') || selectedImage.description;
  
  // Update database
  try {
    const { error } = await supabase
      .from('portfolio_images')
      .update({
        title: newTitle,
        description: newDescription
      })
      .eq('id', selectedImage.id);
    
    if (error) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    } else {
      console.log('\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      console.log(`üñºÔ∏è  ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: ${newTitle}`);
      console.log(`üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà: ${newDescription}`);
    }
  } catch (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
  
  await ask('\n‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
  await showMainMenu();
}

// Delete image
async function deleteImage() {
  console.clear();
  console.log('üóëÔ∏è =======================================');
  console.log('            ‡∏•‡∏ö‡∏†‡∏≤‡∏û');
  console.log('üóëÔ∏è =======================================\n');
  
  // Get all images
  const { data: images, error } = await supabase
    .from('portfolio_images')
    .select('*')
    .order('created_at', { ascending: false });
  
  if (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error.message);
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
    return await showMainMenu();
  }
  
  if (images.length === 0) {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
    return await showMainMenu();
  }
  
  console.log('üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
  images.forEach((img, i) => {
    console.log(`${i + 1}. [${img.category}] ${img.title}`);
  });
  
  const choice = await ask(`\nüëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö (1-${images.length}): `);
  const index = parseInt(choice) - 1;
  
  if (index < 0 || index >= images.length) {
    console.log('‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await deleteImage();
  }
  
  const selectedImage = images[index];
  
  console.log(`\n‚ö†Ô∏è  ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠?`);
  console.log(`üñºÔ∏è  ${selectedImage.title}`);
  console.log(`üìù ${selectedImage.description}`);
  
  const confirm = await ask('üëâ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÉ‡∏ä‡πà" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: ');
  
  if (confirm.toLowerCase() !== '‡πÉ‡∏ä‡πà') {
    console.log('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
    return await showMainMenu();
  }
  
  // Delete from database
  try {
    const { error } = await supabase
      .from('portfolio_images')
      .delete()
      .eq('id', selectedImage.id);
    
    if (error) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    } else {
      console.log('\n‚úÖ ‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      console.log('üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå');
    }
  } catch (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
  
  await ask('\n‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
  await showMainMenu();
}

// View all images
async function viewAllImages() {
  console.clear();
  console.log('üëÄ =======================================');
  console.log('         ‡∏î‡∏π‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
  console.log('üëÄ =======================================\n');
  
  // Get all images grouped by category
  const { data: images, error } = await supabase
    .from('portfolio_images')
    .select('*')
    .order('category', { ascending: true })
    .order('created_at', { ascending: false });
  
  if (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error.message);
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
    return await showMainMenu();
  }
  
  if (images.length === 0) {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
    return await showMainMenu();
  }
  
  // Group by category
  const grouped = {};
  images.forEach(img => {
    if (!grouped[img.category]) {
      grouped[img.category] = [];
    }
    grouped[img.category].push(img);
  });
  
  console.log(`üìä ‡∏™‡∏£‡∏∏‡∏õ: ‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${images.length} ‡∏†‡∏≤‡∏û\n`);
  
  Object.keys(grouped).forEach(category => {
    const categoryInfo = Object.values(categories).find(c => c.category === category);
    const categoryName = categoryInfo ? categoryInfo.name : category;
    
    console.log(`üìÇ ${categoryName} (${grouped[category].length} ‡∏†‡∏≤‡∏û):`);
    grouped[category].forEach((img, i) => {
      console.log(`   ${i + 1}. ${img.title}`);
    });
    console.log();
  });
  
  await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
  await showMainMenu();
}

// Clean database
async function cleanDatabase() {
  console.clear();
  console.log('üßπ =======================================');
  console.log('       ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  console.log('üßπ =======================================\n');
  
  console.log('‚ö†Ô∏è  ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  console.log('üí° ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö');
  console.log('üí° ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ bulk-image-upload.js\n');
  
  const confirm = await ask('üëâ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: ');
  
  if (confirm !== '‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
    console.log('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
    return await showMainMenu();
  }
  
  try {
    // Get count first
    const { count } = await supabase
      .from('portfolio_images')
      .select('*', { count: 'exact', head: true });
    
    console.log(`\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...`);
    
    // Delete all
    const { error } = await supabase
      .from('portfolio_images')
      .delete()
      .neq('id', 0); // Delete all records
    
    if (error) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    } else {
      console.log(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
      console.log('\nüí° ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:');
      console.log('   1. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ');
      console.log('   2. ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: node bulk-image-upload.js');
      console.log('   3. ‡∏£‡∏±‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: npm run dev');
    }
  } catch (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
  
  await ask('\n‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
  await showMainMenu();
}

// View images by category
async function viewByCategory() {
  console.clear();
  console.log('üìÇ =======================================');
  console.log('       ‡∏î‡∏π‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
  console.log('üìÇ =======================================\n');
  
  // Show categories
  console.log('üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π:');
  Object.keys(categories).forEach(key => {
    console.log(`${key}. ${categories[key].name}`);
  });
  console.log('10. üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å\n');
  
  const categoryChoice = await ask('üëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (1-10): ');
  
  if (categoryChoice === '10') {
    return await showMainMenu();
  }
  
  if (!categories[categoryChoice]) {
    console.log('‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1-10 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await viewByCategory();
  }
  
  const selectedCategory = categories[categoryChoice];
  
  // Get images for this category
  const { data: images, error } = await supabase
    .from('portfolio_images')
    .select('*')
    .eq('category', selectedCategory.category)
    .order('created_at', { ascending: false });
  
  if (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error.message);
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await viewByCategory();
  }
  
  console.log(`\nüìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${selectedCategory.name}`);
  console.log('=' * 50);
  
  if (images.length === 0) {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ');
  } else {
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${images.length} ‡∏†‡∏≤‡∏û\n`);
    
    images.forEach((img, i) => {
      console.log(`${i + 1}. üñºÔ∏è  ${img.title}`);
      console.log(`   üìù ${img.description}`);
      console.log(`   üîó ${img.image_url}`);
      console.log(`   üìÖ ${new Date(img.created_at).toLocaleString('th-TH')}`);
      console.log();
    });
  }
  
  console.log('\nüìã ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ?');
  console.log('1. ‚úèÔ∏è  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠/‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û');
  console.log('2. üóëÔ∏è  ‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå');
  console.log('3. ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ');
  console.log('4. üìÇ ‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏ó‡∏ô');
  console.log('5. üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å');
  
  const action = await ask('\nüëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ (1-5): ');
  
  switch(action) {
    case '1':
      if (images.length === 0) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
        await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...');
        return await viewByCategory();
      }
      await editImageInCategory(images);
      break;
    case '2':
      if (images.length === 0) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏•‡∏ö');
        await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...');
        return await viewByCategory();
      }
      await deleteImageInCategory(images);
      break;
    case '3':
      await addImageToCategory(selectedCategory);
      break;
    case '4':
      return await viewByCategory();
    case '5':
      return await showMainMenu();
    default:
      console.log('‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-5 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
      return await viewByCategory();
  }
}

// Edit image in specific category
async function editImageInCategory(images) {
  console.clear();
  console.log('‚úèÔ∏è =======================================');
  console.log('      ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û');
  console.log('‚úèÔ∏è =======================================\n');
  
  console.log('üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:\n');
  
  images.forEach((img, i) => {
    console.log(`${i + 1}. üñºÔ∏è ${img.title}`);
    console.log(`   üìù ${img.description.substring(0, 50)}...`);
    console.log();
  });
  
  const choice = await ask(`üëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (1-${images.length}) ‡∏´‡∏£‡∏∑‡∏≠ 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö: `);
  
  if (choice === '0') {
    return await viewByCategory();
  }
  
  const index = parseInt(choice) - 1;
  
  if (index < 0 || index >= images.length) {
    console.log('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1-' + images.length + ' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await editImageInCategory(images);
  }
  
  const selectedImage = images[index];
  
  console.log('\n' + '='.repeat(50));
  console.log('üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û');
  console.log('='.repeat(50));
  console.log(`üñºÔ∏è  ‡∏ä‡∏∑‡πà‡∏≠: ${selectedImage.title}`);
  console.log(`üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: ${selectedImage.description}`);
  console.log(`üîó URL: ${selectedImage.image_url}`);
  
  console.log('\n‚úèÔ∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ß‡πâ‡∏ô‡πÑ‡∏ß‡πâ):');
  
  const newTitle = await ask('üëâ ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: ') || selectedImage.title;
  const newDescription = await ask('üëâ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà: ') || selectedImage.description;
  
  // Check if anything changed
  if (newTitle === selectedImage.title && newDescription === selectedImage.description) {
    console.log('\nüí° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà...');
    return await viewByCategory();
  }
  
  console.log('\nüìù ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà:');
  console.log(`üñºÔ∏è  ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: ${newTitle}`);
  console.log(`üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà: ${newDescription}`);
  
  const confirm = await ask('\nüëâ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç? ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: ');
  
  if (confirm !== '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç') {
    console.log('‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà...');
    return await viewByCategory();
  }
  
  try {
    const { error } = await supabase
      .from('portfolio_images')
      .update({
        title: newTitle,
        description: newDescription
      })
      .eq('id', selectedImage.id);
    
    if (error) {
      console.log('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    } else {
      console.log('\nüéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
      console.log(`‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: ${newTitle}`);
      console.log(`‚úÖ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà: ${newDescription}`);
      console.log('üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ');
    }
  } catch (error) {
    console.log('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
  
  await ask('\n‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà...');
  await viewByCategory();
}

// Delete image in specific category
async function deleteImageInCategory(images) {
  console.clear();
  console.log('üóëÔ∏è =======================================');
  console.log('         ‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå');
  console.log('üóëÔ∏è =======================================\n');
  
  console.log('üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:');
  console.log('(‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)\n');
  
  images.forEach((img, i) => {
    console.log(`${i + 1}. üñºÔ∏è ${img.title}`);
    console.log(`   üìù ${img.description.substring(0, 50)}...`);
    console.log();
  });
  
  const choice = await ask(`üëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö (1-${images.length}) ‡∏´‡∏£‡∏∑‡∏≠ 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö: `);
  
  if (choice === '0') {
    return await viewByCategory();
  }
  
  const index = parseInt(choice) - 1;
  
  if (index < 0 || index >= images.length) {
    console.log('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1-' + images.length + ' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await deleteImageInCategory(images);
  }
  
  const selectedImage = images[index];
  
  console.log('\n' + '='.repeat(50));
  console.log('‚ö†Ô∏è  ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏†‡∏≤‡∏û');
  console.log('='.repeat(50));
  console.log(`üñºÔ∏è  ‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û: ${selectedImage.title}`);
  console.log(`üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: ${selectedImage.description}`);
  console.log(`üîó URL: ${selectedImage.image_url}`);
  console.log('\nüí° ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ:');
  console.log('   ‚úÖ ‡∏†‡∏≤‡∏û‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå');
  console.log('   ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  console.log('   ‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå');
  
  console.log('\nü§î ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?');
  const confirm = await ask('üëâ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏•‡∏ö‡πÄ‡∏•‡∏¢" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: ');
  
  if (confirm !== '‡∏•‡∏ö‡πÄ‡∏•‡∏¢') {
    console.log('‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏†‡∏≤‡∏û‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢!');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏û...');
    return await viewByCategory();
  }
  
  try {
    const { error } = await supabase
      .from('portfolio_images')
      .delete()
      .eq('id', selectedImage.id);
    
    if (error) {
      console.log('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    } else {
      console.log('\nüéâ ‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
      console.log('‚úÖ ‡∏†‡∏≤‡∏û‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß');
      console.log('üíæ ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå');
      console.log(`üìÅ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: public${selectedImage.image_url}`);
    }
  } catch (error) {
    console.log('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
  
  await ask('\n‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà...');
  await viewByCategory();
}

// Add image to specific category
async function addImageToCategory(selectedCategory) {
  console.log(`\n‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î: ${selectedCategory.name}`);
  
  // Show existing files in folder
  const folderPath = path.join(__dirname, 'public', 'image', selectedCategory.folder);
  const existingFiles = fs.existsSync(folderPath) 
    ? fs.readdirSync(folderPath).filter(f => f.endsWith('.jpg'))
    : [];
  
  console.log(`\nüìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå:`);
  if (existingFiles.length === 0) {
    console.log('   (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå)');
  } else {
    existingFiles.forEach((file, i) => {
      console.log(`   ${i + 1}. ${file}`);
    });
  }
  
  console.log('\nüìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà:');
  const fileName = await ask('üëâ ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏ä‡πà‡∏ô my-photo.jpg): ');
  
  if (!fileName.endsWith('.jpg')) {
    console.log('‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ .jpg');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await viewByCategory();
  }
  
  // Check if file exists
  const fullPath = path.join(folderPath, fileName);
  if (!fs.existsSync(fullPath)) {
    console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${fullPath}`);
    console.log('üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await viewByCategory();
  }
  
  // Auto-generate title or let user input
  const templates = contentTemplates[selectedCategory.category] || ['‡∏†‡∏≤‡∏û‡∏™‡∏ß‡∏¢‡πÜ'];
  const randomTemplate = templates[Math.floor(Math.random() * templates.length)];
  
  console.log(`\nüí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ä‡∏∑‡πà‡∏≠: ${randomTemplate}`);
  const title = await ask('üëâ ‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ä‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥): ') || randomTemplate;
  
  const description = await ask('üëâ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥): ') 
    || `${title} ‡∏à‡∏±‡∏î‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏Ç‡∏≠‡∏á Fuzio Catering ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`;
  
  // Add to database
  try {
    const imageUrl = `/image/${selectedCategory.folder}/${fileName}`;
    
    const { data, error } = await supabase
      .from('portfolio_images')
      .insert({
        title: title,
        description: description,
        category: selectedCategory.category,
        image_url: imageUrl,
        created_at: new Date().toISOString()
      });
    
    if (error) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    } else {
      console.log('\n‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      console.log(`üìÅ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${selectedCategory.name}`);
      console.log(`üñºÔ∏è  ‡∏ä‡∏∑‡πà‡∏≠: ${title}`);
      console.log(`üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: ${description}`);
      console.log(`üîó URL: ${imageUrl}`);
    }
  } catch (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
  
  await ask('\n‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà...');
  await viewByCategory();
}

// Move image between categories
async function moveImageBetweenCategories() {
  console.clear();
  console.log('üì§ =======================================');
  console.log('       ‡∏¢‡πâ‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
  console.log('üì§ =======================================\n');
  
  try {
    // Get all images
    const { data: images, error } = await supabase
      .from('portfolio_images')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (error || !images || images.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
      return await showMainMenu();
    }
    
    console.log('üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢:\n');
    
    images.forEach((img, i) => {
      const categoryInfo = Object.values(categories).find(c => c.category === img.category);
      const categoryName = categoryInfo ? categoryInfo.name : img.category;
      console.log(`${i + 1}. ${img.title} (${categoryName})`);
    });
    
    const imageChoice = await ask('\nüëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç): ');
    const imageIndex = parseInt(imageChoice) - 1;
    
    if (imageIndex < 0 || imageIndex >= images.length) {
      console.log('‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
      return await moveImageBetweenCategories();
    }
    
    const selectedImage = images[imageIndex];
    const currentCategoryInfo = Object.values(categories).find(c => c.category === selectedImage.category);
    
    console.log(`\nüì∏ ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${selectedImage.title}`);
    console.log(`üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${currentCategoryInfo?.name || selectedImage.category}`);
    
    console.log('\nüìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà:');
    Object.keys(categories).forEach(key => {
      const cat = categories[key];
      const catDir = path.join(__dirname, 'public', 'image', cat.folder);
      let imageCount = 0;
      
      if (fs.existsSync(catDir)) {
        const files = fs.readdirSync(catDir);
        imageCount = files.filter(file => 
          file.toLowerCase().endsWith('.jpg') || 
          file.toLowerCase().endsWith('.jpeg') ||
          file.toLowerCase().endsWith('.png')
        ).length;
      }
      
      const status = cat.category === selectedImage.category ? ' (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)' : '';
      console.log(`${key}. ${cat.name} (${imageCount} ‡∏†‡∏≤‡∏û)${status}`);
    });
    
    const categoryChoice = await ask('\nüëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà: ');
    const newCategory = categories[categoryChoice];
    
    if (!newCategory) {
      console.log('‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
      return await moveImageBetweenCategories();
    }
    
    if (newCategory.category === selectedImage.category) {
      console.log('üí° ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
      await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
      return await showMainMenu();
    }
    
    // Create new filename for the new category (check for conflicts)
    const currentPath = selectedImage.image_url.replace('/image/', '');
    const originalFileName = path.basename(currentPath);
    
    // Check target directory for existing files
    const targetDir = path.join(__dirname, 'public', 'image', newCategory.folder);
    if (!fs.existsSync(targetDir)) {
      fs.mkdirSync(targetDir, { recursive: true });
    }
    
    const existingTargetFiles = fs.readdirSync(targetDir);
    const targetImageFiles = existingTargetFiles.filter(file => 
      file.toLowerCase().endsWith('.jpg') || 
      file.toLowerCase().endsWith('.jpeg') ||
      file.toLowerCase().endsWith('.png')
    );
    
    // Generate safe filename
    let newFileName;
    if (targetImageFiles.includes(originalFileName)) {
      // File exists, generate new numbered name
      const numberedFiles = existingTargetFiles
        .map(file => {
          const match = file.match(/^(\d+)\.jpg$/);
          return match ? parseInt(match[1]) : 0;
        })
        .filter(num => num > 0);
      
      const nextNumber = numberedFiles.length > 0 
        ? Math.max(...numberedFiles) + 1 
        : targetImageFiles.length + 1;
      
      newFileName = `${String(nextNumber).padStart(2, '0')}.jpg`;
      console.log(`‚ö†Ô∏è  ‡πÑ‡∏ü‡∏•‡πå ${originalFileName} ‡∏ã‡πâ‡∏≥ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: ${newFileName}`);
    } else {
      newFileName = originalFileName;
    }
    
    const newImageUrl = `/image/${newCategory.folder}/${newFileName}`;
    
    console.log(`\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢:`);
    console.log(`üñºÔ∏è  ‡∏†‡∏≤‡∏û: ${selectedImage.title}`);
    console.log(`üìÇ ‡∏à‡∏≤‡∏Å: ${currentCategoryInfo?.name}`);
    console.log(`üìÇ ‡πÑ‡∏õ: ${newCategory.name}`);
    console.log(`üîó URL ‡πÉ‡∏´‡∏°‡πà: ${newImageUrl}`);
    
    const confirm = await ask('\nüëâ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢? ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡πâ‡∏≤‡∏¢" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: ');
    
    if (confirm !== '‡∏¢‡πâ‡∏≤‡∏¢') {
      console.log('‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
      return await showMainMenu();
    }
    
    // Move the physical file
    const sourcePath = path.join(__dirname, 'public', currentPath);
    const targetPath = path.join(__dirname, 'public', 'image', newCategory.folder, newFileName);
    
    // Check if source file exists
    if (!fs.existsSync(sourcePath)) {
      console.log(`‚ö†Ô∏è  ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏ö: ${sourcePath}`);
      console.log('üí° ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } else {
      // Ensure target directory exists
      const targetDir = path.dirname(targetPath);
      if (!fs.existsSync(targetDir)) {
        fs.mkdirSync(targetDir, { recursive: true });
      }
      
      // Move the file
      fs.copyFileSync(sourcePath, targetPath);
      fs.unlinkSync(sourcePath);
      console.log('‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
    
    // Update database
    const { error: updateError } = await supabase
      .from('portfolio_images')
      .update({
        category: newCategory.category,
        image_url: newImageUrl
      })
      .eq('id', selectedImage.id);
    
    if (updateError) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', updateError.message);
    } else {
      console.log('üéâ ‡∏¢‡πâ‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
      console.log(`‚úÖ ${selectedImage.title} ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ ${newCategory.name}`);
    }
    
  } catch (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
  
  await ask('\n‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
  await showMainMenu();
}

// Upload external file
async function uploadExternalFile() {
  console.clear();
  console.log('üì• =======================================');
  console.log('       ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å');
  console.log('üì• =======================================\n');
  
  console.log('üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
  console.log('1. ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß');
  console.log('2. ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
  console.log('3. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n');
  
  const tempDir = path.join(__dirname, 'temp-upload');
  
  // Create temp directory if not exists
  if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir, { recursive: true });
    console.log(`üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: ${tempDir}`);
  }
  
  console.log(`üìÇ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå: ${tempDir}`);
  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå...\n');
  
  // List files in temp directory
  const tempFiles = fs.readdirSync(tempDir).filter(file => 
    file.toLowerCase().endsWith('.jpg') || 
    file.toLowerCase().endsWith('.jpeg') ||
    file.toLowerCase().endsWith('.png')
  );
  
  if (tempFiles.length === 0) {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÉ‡∏ô temp-upload');
    console.log('üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .jpg, .jpeg ‡∏´‡∏£‡∏∑‡∏≠ .png ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
    return await showMainMenu();
  }
  
  console.log('üì∏ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö:');
  tempFiles.forEach((file, i) => {
    const filePath = path.join(tempDir, file);
    const stats = fs.statSync(filePath);
    const sizeKB = Math.round(stats.size / 1024);
    console.log(`${i + 1}. ${file} (${sizeKB} KB)`);
  });
  
  const fileChoice = await ask('\nüëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç): ');
  const fileIndex = parseInt(fileChoice) - 1;
  
  if (fileIndex < 0 || fileIndex >= tempFiles.length) {
    console.log('‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await uploadExternalFile();
  }
  
  const selectedFile = tempFiles[fileIndex];
  const originalFilePath = path.join(tempDir, selectedFile);
  
  console.log('\nüìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û:');
  Object.keys(categories).forEach(key => {
    const cat = categories[key];
    const catDir = path.join(__dirname, 'public', 'image', cat.folder);
    let imageCount = 0;
    
    if (fs.existsSync(catDir)) {
      const files = fs.readdirSync(catDir);
      imageCount = files.filter(file => 
        file.toLowerCase().endsWith('.jpg') || 
        file.toLowerCase().endsWith('.jpeg') ||
        file.toLowerCase().endsWith('.png')
      ).length;
    }
    
    console.log(`${key}. ${cat.name} (${imageCount} ‡∏†‡∏≤‡∏û)`);
  });
  
  const categoryChoice = await ask('\nüëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ');
  const selectedCategory = categories[categoryChoice];
  
  if (!selectedCategory) {
    console.log('‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await uploadExternalFile();
  }
  
  // Auto-generate filename
  const categoryDir = path.join(__dirname, 'public', 'image', selectedCategory.folder);
  
  // Ensure category directory exists
  if (!fs.existsSync(categoryDir)) {
    fs.mkdirSync(categoryDir, { recursive: true });
  }
  
  // Find next available number by counting all image files
  const existingFiles = fs.readdirSync(categoryDir);
  const imageFiles = existingFiles.filter(file => 
    file.toLowerCase().endsWith('.jpg') || 
    file.toLowerCase().endsWith('.jpeg') ||
    file.toLowerCase().endsWith('.png')
  );
  
  console.log(`üìä ‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ${imageFiles.length} ‡πÑ‡∏ü‡∏•‡πå`);
  if (imageFiles.length > 0) {
    console.log(`üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: ${imageFiles.slice(0, 3).join(', ')}${imageFiles.length > 3 ? '...' : ''}`);
  }
  
  // Get numbers from numbered files (XX.jpg format)
  const numberedFiles = existingFiles
    .map(file => {
      const match = file.match(/^(\d+)\.jpg$/);
      return match ? parseInt(match[1]) : 0;
    })
    .filter(num => num > 0);
  
  // Find next number: either max numbered file + 1, or total files + 1
  const nextNumber = numberedFiles.length > 0 
    ? Math.max(...numberedFiles) + 1 
    : imageFiles.length + 1;
  const newFileName = `${String(nextNumber).padStart(2, '0')}.jpg`;
  const newFilePath = path.join(categoryDir, newFileName);
  
  console.log(`\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà:`);
  console.log(`üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${selectedCategory.name}`);
  console.log(`üìÑ ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°: ${selectedFile}`);
  console.log(`üìÑ ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà: ${newFileName}`);
  console.log(`üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà: public/image/${selectedCategory.folder}/${newFileName}`);
  
  // Generate title and description
  const imageNumber = await getNextImageNumber();
  const title = generateImageTitle(selectedCategory.category, imageNumber);
  const description = generateImageDescription(selectedCategory.category, title);
  
  console.log(`üñºÔ∏è  ‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û: ${title}`);
  console.log(`üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: ${description}`);
  
  const customTitle = await ask('\nüëâ ‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û (‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥): ') || title;
  const customDescription = await ask('üëâ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ (‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥): ') || description;
  
  const confirm = await ask('\nüëâ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î? ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: ');
  
  if (confirm !== '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î') {
    console.log('‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
    return await showMainMenu();
  }
  
  try {
    // Copy file to destination
    fs.copyFileSync(originalFilePath, newFilePath);
    
    // Delete original file
    fs.unlinkSync(originalFilePath);
    
    // Add to database
    const imageUrl = `/image/${selectedCategory.folder}/${newFileName}`;
    
    const { data, error } = await supabase
      .from('portfolio_images')
      .insert([{
        title: customTitle,
        description: customDescription,
        image_url: imageUrl,
        category: selectedCategory.category
      }])
      .select();
    
    if (error) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error.message);
      // Delete the copied file if database insert failed
      if (fs.existsSync(newFilePath)) {
        fs.unlinkSync(newFilePath);
      }
    } else {
      console.log('\nüéâ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
      console.log(`‚úÖ ‡πÑ‡∏ü‡∏•‡πå: ${newFileName}`);
      console.log(`‚úÖ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${selectedCategory.name}`);
      console.log(`‚úÖ ‡∏ä‡∏∑‡πà‡∏≠: ${customTitle}`);
      console.log(`‚úÖ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: ${customDescription}`);
    }
    
  } catch (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
  
  await ask('\n‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
  await showMainMenu();
}

// Helper function to get next image number
async function getNextImageNumber() {
  try {
    const { count } = await supabase
      .from('portfolio_images')
      .select('*', { count: 'exact', head: true });
    
    return (count || 0) + 1;
  } catch (error) {
    return 1;
  }
}

// Helper function to generate clean filename
function generateCleanFilename(originalName, category) {
  // Remove extension
  const nameWithoutExt = originalName.replace(/\.[^/.]+$/, '');
  
  // Convert to clean format
  const cleanName = nameWithoutExt
    .toLowerCase()
    .replace(/[^a-z0-9\-]/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '');
  
  // Add category prefix
  const categoryPrefix = Object.values(categories).find(c => c.category === category)?.folder.split('-')[0] || 'img';
  
  return `${categoryPrefix}-${cleanName}.jpg`;
}

// Selective delete by category
async function selectiveDeleteByCategory() {
  console.clear();
  console.log('üóëÔ∏è =======================================');
  console.log('      ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
  console.log('üóëÔ∏è =======================================\n');
  
  // Show categories with image counts
  console.log('üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:');
  
  // Get current stats for each category
  const { data: allImages, error: statsError } = await supabase
    .from('portfolio_images')
    .select('category');
  
  if (statsError) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', statsError.message);
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...');
    return await showMainMenu();
  }
  
  const categoryStats = allImages.reduce((acc, img) => {
    acc[img.category] = (acc[img.category] || 0) + 1;
    return acc;
  }, {});
  
  Object.keys(categories).forEach(key => {
    const cat = categories[key];
    const count = categoryStats[cat.category] || 0;
    console.log(`${key}. ${cat.name} (${count} ‡∏£‡∏π‡∏õ)`);
  });
  console.log('11. üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å\n');
  
  const categoryChoice = await ask('üëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (1-11): ');
  
  if (categoryChoice === '11') {
    return await showMainMenu();
  }
  
  if (!categories[categoryChoice]) {
    console.log('‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1-11 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await selectiveDeleteByCategory();
  }
  
  const selectedCategory = categories[categoryChoice];
  
  // Get images for this category
  const { data: images, error } = await supabase
    .from('portfolio_images')
    .select('*')
    .eq('category', selectedCategory.category)
    .order('created_at', { ascending: false });
  
  if (error) {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await selectiveDeleteByCategory();
  }
  
  if (images.length === 0) {
    console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î ${selectedCategory.name}`);
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà...');
    return await selectiveDeleteByCategory();
  }
  
  console.log(`\nüìÇ ‡∏´‡∏°‡∏ß‡∏î: ${selectedCategory.name} (${images.length} ‡∏£‡∏π‡∏õ)`);
  console.log('='.repeat(50));
  
  // Show images with numbers
  images.forEach((img, i) => {
    const date = new Date(img.created_at).toLocaleDateString('th-TH');
    console.log(`${i + 1}. üñºÔ∏è  ${img.title}`);
    console.log(`   üìù ${img.description.substring(0, 60)}...`);
    console.log(`   üìÖ ${date}`);
    console.log();
  });
  
  console.log('üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö:');
  console.log('   - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 5');
  console.log('   - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏û: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ ‡πÄ‡∏ä‡πà‡∏ô 1,3,5,7');
  console.log('   - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡∏µ‡∏î ‡πÄ‡∏ä‡πà‡∏ô 1-5 (‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà 1 ‡∏ñ‡∏∂‡∏á 5)');
  console.log('   - 0 = ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å\n');
  
  const selection = await ask('üëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö: ');
  
  if (selection === '0') {
    return await selectiveDeleteByCategory();
  }
  
  // Parse selection
  let selectedIndices = [];
  
  try {
    if (selection.includes(',')) {
      // Multiple selection: 1,3,5
      selectedIndices = selection.split(',').map(s => parseInt(s.trim()) - 1);
    } else if (selection.includes('-')) {
      // Range selection: 1-5
      const [start, end] = selection.split('-').map(s => parseInt(s.trim()));
      for (let i = start - 1; i < end; i++) {
        selectedIndices.push(i);
      }
    } else {
      // Single selection: 5
      selectedIndices = [parseInt(selection) - 1];
    }
    
    // Validate indices
    selectedIndices = selectedIndices.filter(i => i >= 0 && i < images.length);
    
    if (selectedIndices.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
      return await selectiveDeleteByCategory();
    }
    
  } catch (error) {
    console.log('‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...');
    return await selectiveDeleteByCategory();
  }
  
  // Show selected images for confirmation
  const selectedImages = selectedIndices.map(i => images[i]);
  
  console.log(`\n‚ö†Ô∏è  ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö ${selectedImages.length} ‡∏£‡∏π‡∏õ:`);
  console.log('='.repeat(50));
  
  selectedImages.forEach((img, i) => {
    console.log(`${i + 1}. ${img.title}`);
  });
  
  console.log('\nüí° ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ:');
  console.log('   ‚úÖ ‡∏†‡∏≤‡∏û‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå');
  console.log('   ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  console.log('   ‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå');
  
  const confirm = await ask(`\nüëâ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö ${selectedImages.length} ‡∏£‡∏π‡∏õ? ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏•‡∏ö‡πÄ‡∏•‡∏¢" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: `);
  
  if (confirm !== '‡∏•‡∏ö‡πÄ‡∏•‡∏¢') {
    console.log('‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡∏†‡∏≤‡∏û‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢!');
    await ask('‡∏Å‡∏î‡πÄ‡∏≠‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà...');
    return await selectiveDeleteByCategory();
  }
  
  // Delete selected images
  console.log(`\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö ${selectedImages.length} ‡∏£‡∏π‡∏õ...`);
  
  let deletedCount = 0;
  let failedCount = 0;
  
  for (const img of selectedImages) {
    try {
      const { error: deleteError } = await supabase
        .from('portfolio_images')
        .delete()
        .eq('id', img.id);
      
      if (deleteError) {
        console.log(`‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${img.title}`);
        failedCount++;
      } else {
        console.log(`‚úÖ ‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ${img.title}`);
        deletedCount++;
      }
    } catch (error) {
      console.log(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${img.title}`);
      failedCount++;
    }
  }
  
  console.log(`\nüéâ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏ö:`);
  console.log(`‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${deletedCount} ‡∏£‡∏π‡∏õ`);
  if (failedCount > 0) {
    console.log(`‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${failedCount} ‡∏£‡∏π‡∏õ`);
  }
  
  console.log('\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö:');
  const remainingCount = images.length - deletedCount;
  console.log(`üìÇ ${selectedCategory.name}: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${remainingCount} ‡∏£‡∏π‡∏õ`);
  
  const continueChoice = await ask('\nüëâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠? [1=‡∏•‡∏ö‡∏ï‡πà‡∏≠, 2=‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏∑‡πà‡∏ô, 3=‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å]: ');
  
  switch(continueChoice) {
    case '1':
      return await selectiveDeleteByCategory();
    case '2':
      return await selectiveDeleteByCategory();
    case '3':
    default:
      return await showMainMenu();
  }
}

// Helper function to generate image title
function generateImageTitle(category, imageNumber) {
  const templates = contentTemplates[category] || ['‡∏†‡∏≤‡∏û‡∏™‡∏ß‡∏¢‡πÜ'];
  const randomTemplate = templates[Math.floor(Math.random() * templates.length)];
  return `${randomTemplate} - ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà ${imageNumber}`;
}

// Helper function to generate image description
function generateImageDescription(category, title) {
  return `${title} ‡∏à‡∏±‡∏î‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏Ç‡∏≠‡∏á Fuzio Catering ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`;
}

// Start the program
console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...');
showMainMenu().catch(console.error);