import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

const supabaseUrl = 'https://jpkzzovrrjrtchfdxdce.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impwa3p6b3ZycmpydGNoZmR4ZGNlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxMzExODUsImV4cCI6MjA2OTcwNzE4NX0.AZ-o5950oVgxUVHhX82RmHH8-FwNNg8hjtGl6vKen_w';
const supabase = createClient(supabaseUrl, supabaseKey);

// ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î
const categoryContent = {
  'wedding': [
    { title: '‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏π', description: '‡∏à‡∏±‡∏î‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÇ‡∏£‡πÅ‡∏°‡∏ô‡∏ï‡∏¥‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏°', tags: ['‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô', '‡πÇ‡∏£‡πÅ‡∏°‡∏ô‡∏ï‡∏¥‡∏Å', '‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤'] },
    { title: '‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡∏ß‡∏ô', description: '‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô‡∏™‡∏ß‡∏ô‡∏™‡∏ß‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©', tags: ['‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏á‡∏á‡∏≤‡∏ô', '‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á', '‡∏™‡∏ß‡∏ô‡∏™‡∏ß‡∏¢'] }
  ],
  'corporate': [
    { title: '‡∏á‡∏≤‡∏ô‡∏™‡∏±‡∏°‡∏°‡∏ô‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£', description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏±‡∏°‡∏°‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏ç‡πà', tags: ['‡∏™‡∏±‡∏°‡∏°‡∏ô‡∏≤', '‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£', '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'] },
    { title: 'Coffee Break ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°', description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Coffee Break ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°', tags: ['‡∏Å‡∏≤‡πÅ‡∏ü‡πÄ‡∏ö‡∏£‡∏Ñ', '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°', '‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£'] }
  ],
  'fine-dining': [
    { title: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏ä‡∏ü', description: '‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏Æ‡πÄ‡∏≠‡∏ô‡∏î‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏ü‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û', tags: ['‡πÑ‡∏ü‡∏ô‡πå‡πÑ‡∏î‡∏ô‡∏¥‡πà‡∏á', '‡πÄ‡∏ä‡∏ü', '‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤'] },
    { title: 'Tasting Menu ‡∏û‡∏¥‡πÄ‡∏®‡∏©', description: '‡πÄ‡∏°‡∏ô‡∏π‡∏ä‡∏¥‡∏°‡∏•‡∏¥‡πâ‡∏°‡∏£‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏ü', tags: ['‡πÄ‡∏ó‡∏™‡∏ï‡∏¥‡πâ‡∏á', '‡∏û‡∏¥‡πÄ‡∏®‡∏©', '‡πÄ‡∏ä‡∏ü'] }
  ],
  'buffet': [
    { title: '‡∏ö‡∏∏‡∏ü‡πÄ‡∏ü‡πà‡∏ï‡πå‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤', description: '‡∏ö‡∏∏‡∏ü‡πÄ‡∏ü‡πà‡∏ï‡πå‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô ‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏≤‡∏ï‡∏¥', tags: ['‡∏ö‡∏∏‡∏ü‡πÄ‡∏ü‡πà‡∏ï‡πå', '‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢', '‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û'] },
    { title: 'Seafood Buffet', description: '‡∏ö‡∏∏‡∏ü‡πÄ‡∏ü‡πà‡∏ï‡πå‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏°', tags: ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•', '‡∏ö‡∏∏‡∏ü‡πÄ‡∏ü‡πà‡∏ï‡πå', '‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà'] }
  ],
  'cocktail': [
    { title: '‡∏á‡∏≤‡∏ô‡∏Ñ‡πá‡∏≠‡∏Å‡πÄ‡∏ó‡∏•‡∏û‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ', description: '‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ñ‡πá‡∏≠‡∏Å‡πÄ‡∏ó‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏°‡∏¥‡∏Å‡∏ã‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©', tags: ['‡∏Ñ‡πá‡∏≠‡∏Å‡πÄ‡∏ó‡∏•', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', '‡∏û‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ'] },
    { title: 'Welcome Drink ‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏°', description: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á VIP', tags: ['‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', '‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö', 'VIP'] }
  ],
  'coffee-break': [
    { title: '‡∏Å‡∏≤‡πÅ‡∏ü‡πÄ‡∏ö‡∏£‡∏Ñ‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤', description: '‡∏ä‡∏∏‡∏î‡∏Å‡∏≤‡πÅ‡∏ü‡πÄ‡∏ö‡∏£‡∏Ñ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£', tags: ['‡∏Å‡∏≤‡πÅ‡∏ü‡πÄ‡∏ö‡∏£‡∏Ñ', '‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£', '‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏°'] },
    { title: 'Morning Coffee Set', description: '‡∏ä‡∏∏‡∏î‡∏Å‡∏≤‡πÅ‡∏ü‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏™‡∏ï‡∏£‡∏µ‡πâ‡πÄ‡∏ä‡πâ‡∏≤', tags: ['‡∏Å‡∏≤‡πÅ‡∏ü', '‡πÄ‡∏ä‡πâ‡∏≤', '‡πÄ‡∏õ‡∏™‡∏ï‡∏£‡∏µ‡πâ'] }
  ],
  'snack-box': [
    { title: '‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡∏ô‡∏°‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏°', description: '‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á', tags: ['‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡∏ô‡∏°', '‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏°', '‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û'] },
    { title: 'Healthy Snack Box', description: '‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡∏ô‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', tags: ['‡∏Ç‡∏ô‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', '‡∏Å‡∏•‡πà‡∏≠‡∏á', '‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà'] }
  ]
};

// ‡πÅ‡∏°‡∏õ folder ‡∏Å‡∏±‡∏ö category
const folderToCategoryMap: Record<string, string> = {
  '01-weddings': 'wedding',
  '02-corporate-meetings': 'corporate',
  '03-fine-dining': 'fine-dining',
  '04-buffet-service': 'buffet',
  '05-cocktail-reception': 'cocktail',
  '06-coffee-break': 'coffee-break',
  '07-snack-food-box': 'snack-box',
  '08-government-events': 'corporate',
  '09-private-parties': 'wedding'
};

async function runEasyUpload() {
  const output: string[] = ['üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå...'];
  
  const imageDir = path.join(process.cwd(), 'public', 'image');
  const folders = Object.keys(folderToCategoryMap);
  
  let totalFound = 0;
  let totalUploaded = 0;
  
  for (const folder of folders) {
    const folderPath = path.join(imageDir, folder);
    
    if (!fs.existsSync(folderPath)) {
      output.push(`‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° ${folder} - ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ`);
      continue;
    }
    
    const files = fs.readdirSync(folderPath)
      .filter(file => file.endsWith('.jpg'))
      .sort();
    
    if (files.length === 0) {
      output.push(`‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° ${folder} - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ`);
      continue;
    }
    
    const category = folderToCategoryMap[folder];
    output.push(`üìÅ ${folder}: ‡∏û‡∏ö ${files.length} ‡∏£‡∏π‡∏õ ‚Üí ${category}`);
    
    totalFound += files.length;
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡πÑ‡∏´‡∏ô‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß
    const { data: existingImages } = await supabase
      .from('portfolio_images')
      .select('image_url')
      .like('image_url', `%${folder}%`);
    
    const existingUrls = new Set(existingImages?.map(img => img.image_url) || []);
    
    for (let i = 0; i < files.length; i++) {
      const filename = files[i];
      const publicUrl = `/image/${folder}/${filename}`;
      
      // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß
      if (existingUrls.has(publicUrl)) {
        output.push(`  ‚è≠Ô∏è ${filename} - ‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß`);
        continue;
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
      const contentTemplate = categoryContent[category as keyof typeof categoryContent][i % categoryContent[category as keyof typeof categoryContent].length];
      const imageNum = filename.match(/_(\d+)\.jpg$/)?.[1] || (i + 1);
      
      const content = {
        title: `${contentTemplate.title} - ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà ${imageNum}`,
        description: contentTemplate.description,
        category: category,
        image_url: publicUrl,
        created_at: new Date().toISOString()
      };
      
      // ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const { error } = await supabase
        .from('portfolio_images')
        .insert(content);
      
      if (error) {
        output.push(`  ‚ùå ${filename} - ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
      } else {
        output.push(`  ‚úÖ ${filename} - ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß`);
        totalUploaded++;
      }
    }
  }
  
  output.push('');
  output.push('üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
  output.push(`üìä ‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalFound} ‡∏£‡∏π‡∏õ`);
  output.push(`‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà: ${totalUploaded} ‡∏£‡∏π‡∏õ`);
  output.push(`‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß: ${totalFound - totalUploaded} ‡∏£‡∏π‡∏õ`);
  
  return output;
}

async function runEasyReset() {
  const output: string[] = ['üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...'];
  
  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const { error } = await supabase
    .from('portfolio_images')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000'); // ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    
  if (error) {
    output.push(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
  } else {
    output.push('‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
    output.push('üìÅ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ');
  }
  
  return output;
}

export async function POST(request: NextRequest) {
  try {
    const { command } = await request.json();
    
    let output: string[] = [];
    
    switch (command) {
      case 'easy:upload':
        output = await runEasyUpload();
        break;
      
      case 'easy:reset':
        output = await runEasyReset();
        break;
      
      case 'easy:check-duplicates':
        output = ['üîç ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤...', '‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á easy:upload ‡πÅ‡∏ó‡∏ô (‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏π‡∏õ‡∏ã‡πâ‡∏≥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)'];
        break;
      
      case 'easy:remove-duplicates':
        output = ['üóëÔ∏è ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤...', '‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á easy:reset ‡πÅ‡∏•‡πâ‡∏ß easy:upload ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô'];
        break;
      
      default:
        return NextResponse.json({ 
          success: false, 
          error: 'Invalid command' 
        });
    }

    return NextResponse.json({
      success: true,
      output: output
    });

  } catch (error: any) {
    console.error('Command execution error:', error);
    
    return NextResponse.json({
      success: false,
      error: error.message || 'Command execution failed'
    });
  }
}